from pygen_types import MFunction, MEnum, MClass, MArgument
from typing import List
from utils import write_if_different


class SolWriter:
    PREFIX = "pygen_"

    STUB_COMMENT = "// Movutl autogenerated file(SolWriter)\n"

    def set(
        self,
        funcs_list: List[MFunction],
        enums_list: List[MEnum],
        classes_list: List[MClass],
    ):
        # for e in enums_list:
        #     self.register_enum(e)
        for c in classes_list:
            self.register_class(c)
        for f in funcs_list:
            self.register_func(f)
        # for m in members_list:
        #     self.register_property(m)

    def __init__(self, filename: str):
        self.autogen_text = (
            "#include <sol/sol.hpp>\n"
            "#include <lua.hpp>\n"
            "#include <movutl/core/props.hpp>\n"
            "#include <movutl/app/app.hpp>\n"
            "#include <movutl/plugin/input.hpp>\n"
            "#include <movutl/plugin/filter.hpp>\n"
            "#include <movutl/plugin/plugin.hpp>\n"
            "#include <movutl/asset/text.hpp>\n"
            "#include <movutl/asset/image.hpp>\n"
            "#include <movutl/asset/project.hpp>\n"
            "#include <movutl/asset/movie.hpp>\n"
            "#include <movutl/core/anim.hpp>\n"
            "#include <movutl/asset/track.hpp>\n"
            "#include <movutl/asset/entity.hpp>\n"
            "#include <movutl/asset/composition.hpp>\n"
            "namespace mu { \n"
            f"void generated_lua_binding_{self.PREFIX}(sol::state &lua){{\n"
        )

        self.output_filename = "../movutl/generated/" + filename

    def save(self):
        output = (  #
            self.STUB_COMMENT  #
            + self.autogen_text  #
            + "}\n"  #
            + "} // namespace mu\n"  #
        )
        write_if_different(self.output_filename, output)

    def register_func(self, func: MFunction):
        # sol::overload ?
        self.autogen_text += f'lua["{func.name}"] = &{func.name};\n'

    def register_class(self, cls: MClass):
        if cls.name == "Entity":
            return

        self.autogen_text += (
            (f"// {cls.desc}\n" if cls.desc else "")
            + f'lua.new_usertype<{cls.name}>("{cls.name}", // \n'
            + "    sol::constructors<sol::types<>>(), // \n"
        )

        for f in cls.funcs:
            if cls.name == f.name:
                continue
            if "operator" in f.name:
                continue
            self.autogen_text += f'  "{f.name}", &{cls.name}::{f.name}, // \n'
        for p in cls.props:
            self.autogen_text += f'  "{p.name}", &{cls.name}::{p.name}, //\n'

        if self.autogen_text.endswith(", //\n"):
            self.autogen_text = self.autogen_text[:-5] + "\n"
        self.autogen_text += ");\n"
