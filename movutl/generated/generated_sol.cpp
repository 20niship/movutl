// Movutl autogenerated file(SolWriter)
#include <sol/sol.hpp>
#include <lua.hpp>
#include <movutl/core/props.hpp>
#include <movutl/app/app.hpp>
#include <movutl/plugin/input.hpp>
#include <movutl/plugin/filter.hpp>
#include <movutl/plugin/plugin.hpp>
#include <movutl/asset/text.hpp>
#include <movutl/asset/image.hpp>
#include <movutl/asset/project.hpp>
#include <movutl/asset/movie.hpp>
#include <movutl/core/anim.hpp>
#include <movutl/asset/track.hpp>
#include <movutl/asset/entity.hpp>
#include <movutl/asset/composition.hpp>
namespace mu { 
void generated_lua_binding_pygen_(sol::state &lua){
lua.new_usertype<Composition>("Composition", // 
    sol::constructors<sol::types<>>(), // 
  "resize", &Composition::resize, // 
  "str", &Composition::str, // 
  "summary", &Composition::summary, // 
  "GetActiveComp", &Composition::GetActiveComp, // 
  "guid", &Composition::guid, //
  "name", &Composition::name, //
  "flag", &Composition::flag, //
  "frame_final", &Composition::frame_final, //
  "frame_edit", &Composition::frame_edit, //
  "frame_temp", &Composition::frame_temp, //
  "framerate_nu", &Composition::framerate_nu, //
  "framerate_de", &Composition::framerate_de, //
  "fstart", &Composition::fstart, //
  "fend", &Composition::fend, //
  "frame", &Composition::frame, //
  "audio_p", &Composition::audio_p, //
  "audio_n", &Composition::audio_n, //
  "audio_ch", &Composition::audio_ch, //
  "layers", &Composition::layers
);
lua.new_usertype<EntityInfo>("EntityInfo", // 
    sol::constructors<sol::types<>>(), // 
  "str", &EntityInfo::str, // 
  "flag", &EntityInfo::flag, //
  "framerate", &EntityInfo::framerate, //
  "nframes", &EntityInfo::nframes, //
  "format", &EntityInfo::format, //
  "width", &EntityInfo::width, //
  "height", &EntityInfo::height, //
  "audio_n", &EntityInfo::audio_n, //
  "audio_format", &EntityInfo::audio_format, //
  "audio_format_size", &EntityInfo::audio_format_size, //
  "handler", &EntityInfo::handler, //
  "reserve", &EntityInfo::reserve
);
lua.new_usertype<Image>("Image", // 
    sol::constructors<sol::types<>>(), // 
  "dirty", &Image::dirty, // 
  "data", &Image::data, // 
  "set_rgb", &Image::set_rgb, // 
  "set_rgba", &Image::set_rgba, // 
  "copyto_rgba", &Image::copyto_rgba, // 
  "size", &Image::size, // 
  "size_in_bytes", &Image::size_in_bytes, // 
  "reset", &Image::reset, // 
  "fill", &Image::fill, // 
  "channels", &Image::channels, // 
  "rgba", &Image::rgba, // 
  "set_cv_img", &Image::set_cv_img, // 
  "to_cv_img", &Image::to_cv_img, // 
  "imshow", &Image::imshow, // 
  "render", &Image::render, // 
  "getType", &Image::getType, // 
  "fmt", &Image::fmt, //
  "width", &Image::width, //
  "height", &Image::height, //
  "pos", &Image::pos, //
  "scale", &Image::scale, //
  "rotation", &Image::rotation, //
  "alpha", &Image::alpha, //
  "path", &Image::path, //
  "dirty_", &Image::dirty_
);
lua.new_usertype<Movie>("Movie", // 
    sol::constructors<sol::types<>>(), // 
  "Create", &Movie::Create, // 
  "load_file", &Movie::load_file, // 
  "getType", &Movie::getType, // 
  "render", &Movie::render, // 
  "getPropsInfo", &Movie::getPropsInfo, // 
  "getProps", &Movie::getProps, // 
  "setProps", &Movie::setProps, // 
  "pos", &Movie::pos, //
  "scale", &Movie::scale, //
  "rotation", &Movie::rotation, //
  "start_frame_", &Movie::start_frame_, //
  "speed", &Movie::speed, //
  "alpha_", &Movie::alpha_, //
  "loop_", &Movie::loop_, //
  "with_alpha_", &Movie::with_alpha_, //
  "path_", &Movie::path_
);
lua.new_usertype<Project>("Project", // 
    sol::constructors<sol::types<>>(), // 
  "New", &Project::New, // 
  "get_main_comp", &Project::get_main_comp, // 
  "GetActiveCompo", &Project::GetActiveCompo, // 
  "SetActiveCompo", &Project::SetActiveCompo, // 
  "path", &Project::path, //
  "output_path", &Project::output_path, //
  "entities", &Project::entities, //
  "compos_", &Project::compos_, //
  "main_comp_idx", &Project::main_comp_idx
);
lua.new_usertype<TextEntt>("TextEntt", // 
    sol::constructors<sol::types<>>(), // 
  "Create", &TextEntt::Create, // 
  "getType", &TextEntt::getType, // 
  "render", &TextEntt::render, // 
  "getPropsInfo", &TextEntt::getPropsInfo, // 
  "getProps", &TextEntt::getProps, // 
  "setProps", &TextEntt::setProps, // 
  "pos_", &TextEntt::pos_, //
  "scale_x_", &TextEntt::scale_x_, //
  "scale_y_", &TextEntt::scale_y_, //
  "rot_", &TextEntt::rot_, //
  "speed", &TextEntt::speed, //
  "alpha_", &TextEntt::alpha_, //
  "font", &TextEntt::font, //
  "text", &TextEntt::text, //
  "separate", &TextEntt::separate
);
lua.new_usertype<TrackLayer>("TrackLayer", // 
    sol::constructors<sol::types<>>(), // 
  "find_entt", &TrackLayer::find_entt, // 
  "str", &TrackLayer::str, // 
  "summary", &TrackLayer::summary, // 
  "name", &TrackLayer::name, //
  "active", &TrackLayer::active, //
  "entts", &TrackLayer::entts
);
lua["add_new_audio_track"] = &add_new_audio_track;
lua["add_new_track"] = &add_new_track;
lua["add_new_video_track"] = &add_new_video_track;
lua["clear_selected_entts"] = &clear_selected_entts;
lua["cv_waitkey"] = &cv_waitkey;
lua["get_compatible_plugin"] = &get_compatible_plugin;
lua["get_selected_entts"] = &get_selected_entts;
lua["init"] = &init;
lua["new_project"] = &new_project;
lua["open_project"] = &open_project;
lua["save_project"] = &save_project;
lua["save_project_as"] = &save_project_as;
lua["select_entt"] = &select_entt;
lua["select_entts"] = &select_entts;
lua["should_terminate"] = &should_terminate;
lua["terminate"] = &terminate;
lua["update"] = &update;
}
} // namespace mu
