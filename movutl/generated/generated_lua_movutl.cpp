// Movutl autogenerated file(LuaIntfWriter)
#define LUAINTF_LINK_LUA_COMPILED_IN_CXX 0
#include <LuaIntf/LuaIntf.h>
#include <lua.hpp>
#include <imgui.h>
#include <movutl/core/props.hpp>
#include <movutl/app/app.hpp>
#include <movutl/plugin/input.hpp>
#include <movutl/plugin/filter.hpp>
#include <movutl/plugin/plugin.hpp>
#include <movutl/asset/text.hpp>
#include <movutl/asset/image.hpp>
#include <movutl/asset/project.hpp>
#include <movutl/asset/movie.hpp>
#include <movutl/core/anim.hpp>
#include <movutl/gui/gui.hpp>
#include <movutl/binding/imgui_binding.hpp>
#include <movutl/asset/track.hpp>
#include <movutl/asset/entity.hpp>
#include <movutl/binding/imgui_binding.hpp>
#include <movutl/asset/composition.hpp>
extern "C" {
#include <lua.h>
#include <lauxlib.h>
#include <lualib.h>
}

namespace mu::detail { 

using namespace LuaIntf;
using namespace ImGui;

void generated_lua_binding_movutl(lua_State* L) {
    LuaBinding(L).beginModule("movutl")
  .beginModule("AniInterpType")
    .addConstant("LINEAR", AniInterpType::LINEAR)
    .addConstant("EaseIn", AniInterpType::EaseIn)
    .addConstant("EaseOut", AniInterpType::EaseOut)
    .addConstant("EaseInOut", AniInterpType::EaseInOut)
    .addConstant("EaseInQuad", AniInterpType::EaseInQuad)
    .addConstant("EaseOutQuad", AniInterpType::EaseOutQuad)
    .addConstant("EaseInOutQuad", AniInterpType::EaseInOutQuad)
    .addConstant("EaseInCubic", AniInterpType::EaseInCubic)
    .addConstant("EaseOutCubic", AniInterpType::EaseOutCubic)
    .addConstant("EaseInOutCubic", AniInterpType::EaseInOutCubic)
    .addConstant("Custom", AniInterpType::Custom)
  .endModule()
  .beginModule("BlendType")
    .addConstant("Blend_Alpha", BlendType::Blend_Alpha)
    .addConstant("Blend_Add", BlendType::Blend_Add)
    .addConstant("Blend_Sub", BlendType::Blend_Sub)
    .addConstant("Blend_Mul", BlendType::Blend_Mul)
    .addConstant("Blend_Div", BlendType::Blend_Div)
    .addConstant("Blend_Screen", BlendType::Blend_Screen)
    .addConstant("Blend_Overlay", BlendType::Blend_Overlay)
    .addConstant("Blend_Darken", BlendType::Blend_Darken)
    .addConstant("Blend_Lighten", BlendType::Blend_Lighten)
    .addConstant("Blend_HardLight", BlendType::Blend_HardLight)
  .endModule()
  .beginModule("Composition_Composition::Flag")
    .addConstant("setting_dialog", Composition::Composition::Flag::setting_dialog)
    .addConstant("frame_alpha", Composition::Composition::Flag::frame_alpha)
    .addConstant("fast_preview", Composition::Composition::Flag::fast_preview)
    .addConstant("preprocessing", Composition::Composition::Flag::preprocessing)
    .addConstant("hide_output_gui", Composition::Composition::Flag::hide_output_gui)
    .addConstant("nesting", Composition::Composition::Flag::nesting)
    .addConstant("invert_field_order", Composition::Composition::Flag::invert_field_order)
    .addConstant("invert_interlace", Composition::Composition::Flag::invert_interlace)
  .endModule()
  .beginModule("EntityType")
    .addConstant("EntityType_Movie", EntityType::EntityType_Movie)
    .addConstant("EntityType_Audio", EntityType::EntityType_Audio)
    .addConstant("EntityType_Image", EntityType::EntityType_Image)
    .addConstant("EntityType_3DText", EntityType::EntityType_3DText)
    .addConstant("EntityType_Primitive", EntityType::EntityType_Primitive)
    .addConstant("EntityType_Framebuffer", EntityType::EntityType_Framebuffer)
    .addConstant("EntityType_Polygon", EntityType::EntityType_Polygon)
    .addConstant("EntityType_Group", EntityType::EntityType_Group)
    .addConstant("EntityType_Scene", EntityType::EntityType_Scene)
    .addConstant("EntityType_SceneAudio", EntityType::EntityType_SceneAudio)
    .addConstant("EntityType_LayerCopy", EntityType::EntityType_LayerCopy)
    .addConstant("EntityType_Particle", EntityType::EntityType_Particle)
    .addConstant("EntityType_Custom", EntityType::EntityType_Custom)
    .addConstant("EntityType_3DModel", EntityType::EntityType_3DModel)
    .addConstant("EntityType_Camera", EntityType::EntityType_Camera)
    .addConstant("EntityType_Effect", EntityType::EntityType_Effect)
  .endModule()
  .beginModule("ImageFormat")
    .addConstant("ImageFormatRGB", ImageFormat::ImageFormatRGB)
    .addConstant("ImageFormatRGBA", ImageFormat::ImageFormatRGBA)
    .addConstant("ImageFormatGRAYSCALE", ImageFormat::ImageFormatGRAYSCALE)
  .endModule()
  .beginClass<Composition>("Composition")
    .addFunction("resize", &Composition::resize)
    .addFunction("str", &Composition::str)
    .addFunction("summary", &Composition::summary)
    .addStaticFunction("GetActiveComp", &Composition::GetActiveComp)
    .addFunction("insertable_layer_index", &Composition::insertable_layer_index)
    .addFunction("insert_entity", &Composition::insert_entity)
    .addVariable("guid", &Composition::guid) // uint32_t
    .addVariable("name", &Composition::name) // FixString
    .addVariable("flag", &Composition::flag) // Flag
    .addVariable("frame_final", &Composition::frame_final) // Ref<Image>
    .addVariable("frame_edit", &Composition::frame_edit) // Ref<Image>
    .addVariable("frame_temp", &Composition::frame_temp) // Ref<Image>
    .addVariable("framerate_nu", &Composition::framerate_nu) // int32_t
    .addVariable("framerate_de", &Composition::framerate_de) // int32_t
    .addVariable("fstart", &Composition::fstart) // int32_t
    .addVariable("fend", &Composition::fend) // int32_t
    .addVariable("frame", &Composition::frame) // int32_t
    .addVariable("audio_n", &Composition::audio_n) // int32_t
    .addVariable("audio_ch", &Composition::audio_ch) // int32_t
    .addVariable("layers", &Composition::layers) // std::vector<TrackLayer>
  .endClass()
  .beginClass<EntityInfo>("EntityInfo")
    .addFunction("str", &EntityInfo::str)
    .addVariable("flag", &EntityInfo::flag) // EntityType
    .addVariable("framerate", &EntityInfo::framerate) // float
    .addVariable("nframes", &EntityInfo::nframes) // uint32_t
    .addVariable("format", &EntityInfo::format) // ImageFormat
    .addVariable("width", &EntityInfo::width) // uint16_t
    .addVariable("height", &EntityInfo::height) // uint16_t
    .addVariable("audio_n", &EntityInfo::audio_n) // int32_t
    .addVariable("audio_format_size", &EntityInfo::audio_format_size) // int32_t
  .endClass()
  .beginClass<Image>("Image")
    .addFunction("size", &Image::size)
    .addFunction("width", &Image::width)
    .addFunction("height", &Image::height)
    .addFunction("reset", &Image::reset)
    .addFunction("fill", &Image::fill)
    .addFunction("data", &Image::data)
    .addFunction("dirty", &Image::dirty)
    .addFunction("get_dirty", &Image::get_dirty)
    .addFunction("channels", &Image::channels)
    .addFunction("imshow", &Image::imshow)
    .addFunction("getType", &Image::getType)
    .addFunction("getPropsInfo", &Image::getPropsInfo)
    .addFunction("getProps", &Image::getProps)
    .addFunction("setProps", &Image::setProps)
    .addVariable("fmt", &Image::fmt) // ImageFormat
    .addVariable("pos", &Image::pos) // Vec3
    .addVariable("scale", &Image::scale) // Vec2
    .addVariable("rotation", &Image::rotation) // float
    .addVariable("alpha", &Image::alpha) // float
    .addVariable("path", &Image::path) // std::string
  .endClass()
  .beginClass<ImageRGBA>("ImageRGBA")
    .addFunction("dirty", &ImageRGBA::dirty)
    .addFunction("data", &ImageRGBA::data)
    .addFunction("set_rgb", &ImageRGBA::set_rgb)
    .addFunction("set_rgba", &ImageRGBA::set_rgba)
    .addFunction("size", &ImageRGBA::size)
    .addFunction("size_in_bytes", &ImageRGBA::size_in_bytes)
    .addFunction("reset", &ImageRGBA::reset)
    .addFunction("fill", &ImageRGBA::fill)
    .addFunction("rgba", &ImageRGBA::rgba)
    .addFunction("imshow", &ImageRGBA::imshow)
    .addVariable("width", &ImageRGBA::width) // unsigned int
    .addVariable("height", &ImageRGBA::height) // unsigned int
    .addVariable("dirty_", &ImageRGBA::dirty_) // int16_t
    .addVariable("alpha", &ImageRGBA::alpha) // bool
  .endClass()
  .beginClass<Movie>("Movie")
    .addStaticFunction("Create", &Movie::Create)
    .addFunction("load_file", &Movie::load_file)
    .addFunction("getType", &Movie::getType)
    .addFunction("getPropsInfo", &Movie::getPropsInfo)
    .addFunction("getProps", &Movie::getProps)
    .addFunction("setProps", &Movie::setProps)
    .addVariable("pos", &Movie::pos) // Vec3
    .addVariable("scale", &Movie::scale) // Vec2
    .addVariable("rotation", &Movie::rotation) // float
    .addVariable("start_frame_", &Movie::start_frame_) // int
    .addVariable("speed", &Movie::speed) // float
    .addVariable("alpha_", &Movie::alpha_) // uint8_t
    .addVariable("loop_", &Movie::loop_) // bool
    .addVariable("with_alpha_", &Movie::with_alpha_) // bool
    .addVariable("path_", &Movie::path_) // std::string
  .endClass()
  .beginClass<Project>("Project")
    .addStaticFunction("New", &Project::New)
    .addFunction("get_main_comp", &Project::get_main_comp)
    .addStaticFunction("GetActiveCompo", &Project::GetActiveCompo)
    .addStaticFunction("SetActiveCompo", &Project::SetActiveCompo)
    .addVariable("path", &Project::path) // std::string
    .addVariable("output_path", &Project::output_path) // std::string
    .addVariable("entities", &Project::entities) // std::vector<Ref<Entity> >
    .addVariable("compos_", &Project::compos_) // std::vector<Composition>
    .addVariable("main_comp_idx", &Project::main_comp_idx) // int
  .endClass()
  .beginClass<TextEntt>("TextEntt")
    .addStaticFunction("Create", &TextEntt::Create)
    .addFunction("getType", &TextEntt::getType)
    .addFunction("getPropsInfo", &TextEntt::getPropsInfo)
    .addFunction("getProps", &TextEntt::getProps)
    .addFunction("setProps", &TextEntt::setProps)
    .addVariable("dirty_", &TextEntt::dirty_) // int32_t
    .addVariable("pos_", &TextEntt::pos_) // Vec3
    .addVariable("scale_x_", &TextEntt::scale_x_) // float
    .addVariable("scale_y_", &TextEntt::scale_y_) // float
    .addVariable("rot_", &TextEntt::rot_) // float
    .addVariable("speed", &TextEntt::speed) // float
    .addVariable("alpha_", &TextEntt::alpha_) // uint8_t
    .addVariable("font", &TextEntt::font) // std::string
    .addVariable("text", &TextEntt::text) // std::string
    .addVariable("separate", &TextEntt::separate) // bool
  .endClass()
  .beginClass<TrackLayer>("TrackLayer")
    .addFunction("find_entt", &TrackLayer::find_entt)
    .addFunction("str", &TrackLayer::str)
    .addFunction("summary", &TrackLayer::summary)
    .addVariable("name", &TrackLayer::name) // FixString
    .addVariable("active", &TrackLayer::active) // bool
    .addVariable("entts", &TrackLayer::entts) // std::vector<Ref<Entity> >
  .endClass()
  .beginClass<TrackObject>("TrackObject")
    .addFunction("visible", &TrackObject::visible)
    .addFunction("getPropsInfo", &TrackObject::getPropsInfo)
    .addFunction("getProps", &TrackObject::getProps)
    .addFunction("setProps", &TrackObject::setProps)
    .addVariable("fstart", &TrackObject::fstart) // int
    .addVariable("fend", &TrackObject::fend) // int
    .addVariable("anchor", &TrackObject::anchor) // Vec2
    .addVariable("blend_", &TrackObject::blend_) // BlendType
    .addVariable("active_", &TrackObject::active_) // bool
    .addVariable("solo_", &TrackObject::solo_) // bool
    .addVariable("clipping_up", &TrackObject::clipping_up) // bool
    .addVariable("camera_ctrl", &TrackObject::camera_ctrl) // bool
  .endClass()
    .addFunction("add_new_audio_track", static_cast<bool(*)( const char *, const char *, int, int)>(&add_new_audio_track))
    .addFunction("add_new_track", static_cast<bool(*)( const char *, EntityType, int, int)>(&add_new_track))
    .addFunction("add_new_video_track", static_cast<Ref<Entity>(*)( const char *, const char *, int, int)>(&add_new_video_track))
    .addFunction("apply_imgui_style", static_cast<void(*)( const char *)>(&apply_imgui_style))
    .addFunction("clear_selected_entts", static_cast<void(*)( )>(&clear_selected_entts))
    .addFunction("cv_waitkey", static_cast<void(*)( int)>(&cv_waitkey))
    .addFunction("get_compatible_plugin", static_cast<InputPluginTable *(*)( const char *, EntityType)>(&get_compatible_plugin))
    .addFunction("get_selected_entts", static_cast<std::vector<Ref<Entity> >(*)( )>(&get_selected_entts))
    .addFunction("init", static_cast<void(*)( )>(&init))
    .addFunction("new_project", static_cast<void(*)( )>(&new_project))
    .addFunction("open_project", static_cast<void(*)( const char *)>(&open_project))
    .addFunction("register_imgui_style", static_cast<void(*)( const char *, const ImGuiStyle &)>(&register_imgui_style))
    .addFunction("remove_imgui_style", static_cast<void(*)( const char *)>(&remove_imgui_style))
    .addFunction("render_main_menu_bar", static_cast<void(*)( )>(&render_main_menu_bar))
    .addFunction("save_project", static_cast<void(*)( )>(&save_project))
    .addFunction("save_project_as", static_cast<void(*)( const char *)>(&save_project_as))
    .addFunction("select_entt", static_cast<void(*)( const Ref<Entity> &)>(&select_entt))
    .addFunction("select_entts", static_cast<void(*)( const std::vector<Ref<Entity> > &)>(&select_entts))
    .addFunction("should_terminate", static_cast<bool(*)( )>(&should_terminate))
    .addFunction("terminate", static_cast<void(*)( )>(&terminate))
    .addFunction("update", static_cast<void(*)( )>(&update))
   .endModule();
}
} // namespace mu::detail
